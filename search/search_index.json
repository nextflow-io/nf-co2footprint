{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"nf-co2footprint","text":"<p>A Nextflow plugin to estimate the CO\u2082 footprint of pipeline runs.</p>"},{"location":"#docs-httpsnextflow-iogithubionf-co2footprint","title":"\ud83d\udcda Docs \ud83d\udc49\ud83c\udffb https://nextflow-io.github.io/nf-co2footprint","text":""},{"location":"#introduction","title":"Introduction","text":"<p>The nf-co2footprint plugin estimates the energy consumption for each pipeline task based on the Nextflow resource usage metrics and information about the power consumption of the underlying compute system. The carbon intensity of the energy production is then used to estimate the respective CO\u2082 emission.</p> <p>The calculation is based on the carbon footprint computation method developed in the Green Algorithms Project.</p> <p>Green Algorithms: Quantifying the Carbon Footprint of Computation Lannelongue, L., Grealey, J., Inouye, M., Adv. Sci. 2021, 2100707. https://doi.org/10.1002/advs.202100707</p> <p>The nf-co2footprint plugin generates a detailed TXT carbon footprint report containing the energy consumption, the estimated CO\u2082 emission and other relevant metrics for each task. Additionally, an HTML report is generated with information about the carbon footprint of the whole pipeline run and containing plots showing, for instance, an overview of the CO\u2082 emissions for the different processes.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Declare the plugin in your Nextflow pipeline configuration file:</p> nextflow.config<pre><code>plugins {\n  id 'nf-co2footprint@1.0.0'\n}\n</code></pre> <p>This is all that is needed. Run your pipeline with the usual command: <pre><code>nextflow run &lt;pipeline_name&gt;.nf \n</code></pre></p> <p>More details are available in the Nextflow plugin documentation and the configuration guide. </p>"},{"location":"#output","title":"Output","text":"<p>The plugin generates three files, a detailed report, a text summary, and a trace file. For more details, see the output documentation.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Before contributing, please read the contribution guidelines carefully. You may also find the recommended testing setup helpful.</p> <p>After your changes are accepted. maintainers may then publish a new version along with your contribution.</p>"},{"location":"#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any problem, please have a look at our FAQ and the issue section on our Github. If you can't find a satisfying solution please open a new issue. Chances are you are not the only one experiencing it.</p>"},{"location":"#credits","title":"Credits","text":"<p>The <code>nf-co2footprint</code> plugin has been mainly developed by:</p> <ul> <li>Josua Carl</li> <li>Nadja Volkmann</li> <li>J\u00falia Mir-Pedrol</li> <li>Sabrina Krakau</li> </ul> <p>at QBiC. Special thanks to Lo\u00efc Lannelongue from the University of Cambridge, UK for collaboration and contributing to this project.</p> <p>We additionally thank the following people for their extensive assistance in the development of this plugin:</p> <ul> <li>Phil Ewels</li> <li>Paolo Di Tommaso</li> <li>Matthias H\u00f6rtenhuber</li> <li>Till Englert</li> <li>Bastian Eisenmann</li> <li>Hemant Kumar Joon</li> </ul>"},{"location":"#how-to-cite","title":"How to cite:","text":"<p><pre><code>J. Carl, N. Volkmann, J. Mir-Pedrol, P. Ewels, S. Nahnsen, S. Krakau nextflow-io/nf-co2footprint v1.0.0. (Jun., 2025). nextflow-io. Available: https://github.com/nextflow-io/nf-co2footprint\n</code></pre> <pre><code>@software{nf_co2footprint_plugin,\n    author =    {Josua Carl and\n                 Nadja Volkmann and\n                 J\u00falia Mir-Pedrol and\n                 Phil Ewels and\n                 Sven Nahnsen and\n                 Sabrina Krakau}\n    title   =   {nextflow-io/nf-co2footprint - A Nextflow plugin to estimate the CO2e footprint of pipeline runs}\n    month   =   {June}\n    year    =   {2025}\n    publisher = {Nextflow-io}\n    version =   {v1.0.0}\n    url     =   {https://doi.org/10.5281/zenodo.14622304}\n    doi     =   {10.5281/zenodo.14622304}\n}\n</code></pre></p>"},{"location":"#data-attribution","title":"Data Attribution","text":""},{"location":"#carbon-intensity","title":"Carbon intensity","text":"<p>This project uses carbon intensity (CI) data from Electricity Maps under the Open Database License (ODbL). Depending on the configuration, either historical yearly data from 2024 is used or real-time CI values are accessed via the Electricity Maps API.</p> <p>Electricity Maps: Carbon Intensity Data Electricity Maps (2025). 2024 Yearly Carbon Intensity Data (Version January 27, 2025). Electricity Maps. https://www.electricitymaps.com</p> <p>You are free to use, share, and adapt the data under the terms of the ODbL. For more details and attribution requirements, see the NOTICE file.</p>"},{"location":"#cpu-tdp-data","title":"CPU TDP data","text":"<p>To estimate the CPU power draw this project uses CPU TDP data from WikiChip under the CC BY-NC-SA 4.0 license.</p> <p>WikiChip: CPU Data WikiChip LLC (2025). CPU Data including Thermal Design Power (TDP) (Version June 20, 2025). WikiChip. https://en.wikichip.org/wiki/WikiChip</p> <p>You are free to use, share, and adapt the data under the terms of the CC BY-NC-SA 4.0. For more details and attribution requirements, see the NOTICE file.</p>"},{"location":"co2footprint_calculation/","title":"CO\u2082e calculation","text":"<p>A CO\u2082 equivalent (CO\u2082e) is a metric used to compare the emissions from various greenhouse gases based on their impact on global warming. For this, the amounts of other gases are converted to the amount of CO\u2082 that would have the same impact on global warming (over a 100-year period).</p> <p>The formula used for the calculation of the carbon footprint (CO\u2082e) of one Nextflow task is based on the methodology introduced by Green Algorithms, which provides a standardized way to estimate the carbon footprint of computational tasks:</p> \\[  \\begin{equation*} \\text{CO\u2082e (g)} = t \\times \\left( n_c \\times u_c \\times P_c + n_m \\times P_m \\right) \\times PUE \\times CI  \\end{equation*} \\] <p>where</p> \\[ \\begin{aligned} t   &amp; = \\text{runtime of the computation (h)} \\\\ n_c &amp; = \\text{number of cores} \\\\ u_c &amp; = \\text{core usage factor (between 0 and 1)} \\\\ P_c &amp; = \\text{power draw per core (W)} \\\\ n_m &amp; = \\text{size of memory available (GB)} \\\\ P_m &amp; = \\text{power draw of memory (W, per GB)} \\\\ PUE &amp; = \\text{Power Usage Effectiveness of the data center} \\\\ CI &amp; = \\text{carbon intensity of energy production, which is the amount of CO\u2082e emitted per kWh of energy, depending on the energy mix of a region} \\end{aligned} \\] <p>For the final CO\u2082e estimation of a pipeline run, the values of reused cached and completed tasks are summed up. This includes failed tasks as well.</p> <p>Note</p> <p>The usage of GPUs is not yet supported.</p>"},{"location":"co2footprint_calculation/#additional-equivalence-metrics-for-easier-interpretation-of-carbon-emissions","title":"Additional equivalence metrics for easier interpretation of carbon emissions","text":"<p>Let \\(x~\\mathrm{gCO_2e}\\) denote the total emitted CO\u2082e (in grams) for the computation or pipeline run. This value is used in the following equivalence calculations:</p>"},{"location":"co2footprint_calculation/#tree-sequestration-time","title":"Tree sequestration time","text":"<p>The tree sequestration time equates to the time a tree needs to bind the same amount of carbon from the atmosphere. It is estimated to be on average \\(10\\)-\\(11~\\mathrm{kg}\\) per year (= \\(917~\\mathrm{g}\\) per month).</p> \\[ t_{\\text{tree}} = \\frac{x~\\mathrm{gCO_2e}}{917~\\mathrm{gCO_2e}/\\mathrm{month}} \\]"},{"location":"co2footprint_calculation/#car-kilometers","title":"Car kilometers","text":"<p>The car kilometers are defined as the distance an average car would need to travel to emit the same amount of CO\u2082. An average European car emits \\(175~\\mathrm{gCO_2e}\\) per km.</p> \\[ d_{\\text{car}} = \\frac{x~\\mathrm{gCO_2e}}{175~\\mathrm{gCO_2e}/\\mathrm{km}} \\]"},{"location":"co2footprint_calculation/#flights-london-paris","title":"Flights London-Paris","text":"<p>A flight between London and Paris is estimated to emit \\(50\\,000~\\mathrm{g}\\) of CO\u2082e.</p> \\[ n_{\\text{L-P}} = \\frac{x~\\mathrm{gCO_2e}}{50\\,000~\\mathrm{gCO_2e}} \\] <p>The value is given as a percentage when less than one flight is equivalent to the emitted CO\u2082.</p>"},{"location":"co2footprint_calculation/#references","title":"References","text":"<p>Green Algorithms: Quantifying the Carbon Footprint of Computation Lannelongue, L., Grealey, J., Inouye, M., Adv. Sci. 2021, 2100707. https://doi.org/10.1002/advs.202100707</p>"},{"location":"contributing/guidelines/","title":"Contribution guidelines","text":"<p>Hi! Thanks for contributing to the nf-co2footprint plugin for Nextflow \ud83d\ude0a</p> <p>Please read the following to help us maintain and ensure high-quality code.</p>"},{"location":"contributing/guidelines/#follow-commit-style","title":"\ud83d\udc85 Follow commit style","text":"<p>Commits should be structured like this: <code>&lt;Type&gt;: &lt;Message&gt;</code>, with the following types:</p> <ul> <li><code>Feature</code> representing an enhancement or new functionality</li> <li><code>Fix</code> when addressing a bug</li> <li><code>Documentation</code> when mainly improving comments, documentation files or docstrings</li> <li><code>Refactor</code> when moving stuff or changing naming, but essentially making no functional changes</li> <li><code>CI</code> when changing the continuous integration (guidelines, templates,...)</li> <li><code>Chore</code> when just doing something that has to be done once in a while or relates to other changes</li> </ul>"},{"location":"contributing/guidelines/#signing-commits","title":"\ud83d\udd8b\ufe0f Signing commits","text":"<p>When submitting a pull-request (PR), please sign-off the DCO to certify that you are the author of the contribution and you adhere to Nextflow's open source license by adding a <code>Signed-off-by</code> line to the contribution commit message. See here for more details.</p>"},{"location":"contributing/guidelines/#githubs-issue-tracking","title":"\ud83d\udea9 Github's issue tracking","text":"<ul> <li>When working on an issue, please assign yourself</li> <li>When opening a pull-request that connects to an issue, please mention it.</li> <li>Assign labels / types to PRs when possible</li> </ul>"},{"location":"contributing/guidelines/#create-draft-pull-requests","title":"\ud83c\udfd7\ufe0f Create draft pull-requests","text":"<ul> <li>This tells us that you are working on something, even during early stage of development. Don't worry about everything being perfect already, that's what it's for.</li> <li>If you are unable to finish the PR, someone may easily pick up the work where you left off.</li> </ul>"},{"location":"contributing/guidelines/#comment-your-code","title":"\ud83d\udcac Comment your code","text":"<ul> <li>Use docstrings for methods &amp; classes</li> <li>Use one line comments for variables</li> </ul>"},{"location":"contributing/guidelines/#unit-testing","title":"\u2611\ufe0f Unit testing","text":"<p>Run unit test frequently to notice faulty code early on. For that purpose also try to keep them brief (i.e. mock as little as possible).</p> <p>To run your unit tests, run the following command in the project root directory (ie. where the file <code>settings.gradle</code> is located): <pre><code>make test\n</code></pre></p>"},{"location":"contributing/publishing/","title":"Publishing","text":""},{"location":"contributing/publishing/#publish-the-plugin","title":"\ud83d\udce1 Publish the plugin","text":"<p>To publish the plugin to the Nextflow plugin registry, follow the instructions in the Nextflow docs about Publishing a plugin. </p>"},{"location":"contributing/setup/","title":"Testing and debugging","text":""},{"location":"contributing/setup/#option-1-launch-with-local-nextflow-build","title":"Option 1: \ud83d\udee0\ufe0f Launch with local Nextflow build","text":"<p>To test with Nextflow for development purpose:</p> <ol> <li>Clone the Nextflow repo into a sibling directory</li> </ol> <p><pre><code>cd .. &amp;&amp; git clone https://github.com/nextflow-io/nextflow\ncd nextflow &amp;&amp; ./gradlew exportClasspath\n</code></pre> 2. Append the following line to the <code>settings.gradle</code> in this project:</p> <p><pre><code>includeBuild('../nextflow')\n</code></pre> 3. Compile the plugin code</p> <p><pre><code>./gradlew compileGroovy\n</code></pre> 4. Run nextflow with this command:</p> <pre><code>./launch.sh run -plugins nf-co2footprint &lt;script/pipeline name&gt; [pipeline params]\n</code></pre>"},{"location":"contributing/setup/#option-2-launch-via-regularly-installed-nextflow","title":"Option 2: \ud83d\ude80 Launch via regularly installed Nextflow","text":"<p>The plugin can be tested without using a local Nextflow build using the following steps:</p> <p>Warning</p> <p>This will install the compiled plugin code into the <code>$NXF_PLUGINS_DIR</code> directory (default: <code>${HOME}/.nextflow/plugins</code>). If a plugin with the same version (as specified in <code>nf-co2footprint/build.gradle</code>) already exists in this directory, it will be overwritten. </p> <ol> <li>Compile and install the plugin code</li> </ol> <p><pre><code>make install\n</code></pre> 2. Run nextflow with this command, specifying the plugin version:</p> <pre><code>nextflow run &lt;script/pipeline name&gt; [pipeline params] -plugins nf-co2footprint@1.0.0\n</code></pre>"},{"location":"contributing/setup/#compiling-and-running-tests","title":"\ud83e\uddea Compiling and running tests","text":"<p>To compile and run the tests use the following command:</p> <pre><code>make test\n</code></pre>"},{"location":"contributing/setup/#change-and-preview-the-docs","title":"\ud83d\udcc4 Change and preview the docs","text":"<p>The docs are generated using Material for MkDocs. To change the docs, edit the files in the docs/ folder and run the following command to generate the docs (after installing mkdocs via <code>pip install mkdocs-material</code>):</p> <pre><code>mkdocs serve\n</code></pre> <p>To preview the docs, open the URL provided by mkdocs in your browser.</p>"},{"location":"usage/FAQ/","title":"FAQ","text":""},{"location":"usage/FAQ/#frequently-asked-questions-faq","title":"Frequently asked questions (FAQ)","text":"Could not find CPU model <p>In our plugin, we are trying to match your CPU model name to entries in our TDP data table. Unfortunately things are not as smooth sailing as we would like it to be.</p> <p>Main issues</p> <ol> <li>Manufacturers have not given us access to their CPU data. While the manufacturers provide information to more than 4000 models     on their websites, redistribution and automatic parsing of this info needs their permission. We currently use     WikiChip as our main source, which encompasses approximately 1400 models.     Our current hope is that the new MIT processor database will solve this question in the next few months.</li> <li>Naming of CPU models is inconsistent. Sometimes the true model name (\"Model X 1000\") is appended with     extra information (\"Model X 1000 @10MHz\"), slightly changed (\"Manufacturer - Model X 1000\"), or hidden (\"M1\"). While     we are working on accounting for all these cases, it's not a trivial problem to solve.</li> <li>Cloud providers sometimes use custom processors that are not publicly listed.</li> </ol> <p> \ud83d\udca1 Solution</p> <p>So you encountered a warning like this: <pre><code>[WARN] Could not find CPU model \"Model X 1000\" in given TDP data table. Using default CPU power draw value (100.0 W).\n</code></pre> As previously mentioned, all information we need should be out there somewhere \u2014 the TDP of your model should be easy to find with a quick online search. Once you know the TDP and the number of cores you can either:</p> <ul> <li>Create a small table with your CPU model names, as they are presented in the warnings, and   supply the path to this table via the <code>customCpuTdpFile = &lt;path&gt;</code> parameter.</li> <li>Set the TDP via <code>powerdrawCpuDefault = &lt;TDP per core&gt;</code> and then ignore the warning with <code>ignoreCpuModel = true</code>.</li> </ul> <p>For more information see our documentation on power draw parameters. You can additionally report the model with the \"Missing chip\" GitHub issue.</p>"},{"location":"usage/configuration/","title":"Configuration of the nf-co2footprint plugin","text":""},{"location":"usage/configuration/#general-usage","title":"General usage","text":"<p>To test if the plugin works on your system please follow the quick start guide (Quick Start) on a small pipeline like nextflow-io/hello.</p> <p>To customize the plugin settings to your computing environment and preferences, you can adjust the nf-co2footprint plugin parameters in your config file as follows:</p> nextflow.config<pre><code>plugins {\n  id 'nf-co2footprint@1.0.0'\n}\n\n// Optional example config settings for CO\u2082 reporting:\n\ndef co2_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')\n\nco2footprint {\n  traceFile = \"${params.outdir}/pipeline_info/co2footprint_trace_${co2_timestamp}.txt\"\n  summaryFile = \"${params.outdir}/pipeline_info/co2footprint_summary_${co2_timestamp}.txt\"\n  reportFile = \"${params.outdir}/pipeline_info/co2footprint_report_${co2_timestamp}.html\"\n  location = 'DE'                             // replace with your zone code\n  emApiKey = secrets.EM_API_KEY               // set your API key as Nextflow secret with the name 'EM_API_KEY'\n  pue = 1.3                                   // replace with PUE of your data center\n  machineType = 'compute cluster'             // set to 'compute cluster', 'local', or 'cloud'\n}\n</code></pre> <p>Include the config file for your pipeline run using the <code>-c</code> Nextflow parameter, for example as follows:</p> <pre><code>nextflow run nextflow-io/hello -c nextflow.config\n</code></pre> <p>For a complete list and detailed descriptions of all available configuration parameters, please refer to the Parameters section.</p>"},{"location":"usage/configuration/#carbon-intensity-ci","title":"Carbon intensity (CI)","text":""},{"location":"usage/configuration/#how-are-ci-values-determined-by-default","title":"How are CI values determined by default?","text":"<p>The plugin can retrieve real-time carbon intensity (CI) values in grams of CO\u2082-equivalent per kilowatt-hour (gCO\u2082eq/kWh) from Electricity Maps if a valid API key and location are provided. This enables task-specific CI estimates based on the actual energy mix at execution time. If no API key is supplied, the plugin will fall back to using 2024 yearly average values for the specified zone (if available). When no location is provided either, a global default CI value is used.</p> <p>The logic applied in detail: </p> <ol> <li>If <code>ci</code> is explicitly set, this value is used directly as the carbon intensity, and no API call is made.</li> <li>If <code>ci</code> is not set, but both <code>location</code> and <code>emApiKey</code> are provided, the plugin will query the Electricity Maps API for a real-time carbon intensity value for the specified zone. The API call is made once per Nextflow task to retrieve the most up-to-date carbon intensity.</li> <li>If only <code>location</code> is set, the plugin will fallback to a default value for the specified zone. </li> <li>If neither <code>ci</code> nor valid <code>location</code> and <code>apiKey</code> are provided, the plugin will  fallback to a global default value.</li> </ol> <p>Carbon intensity data is retrieved from Electricity Maps and used under the Open Database License (ODbL). See the full attribution and license terms here.</p>"},{"location":"usage/configuration/#accounting-for-a-personal-energy-mix","title":"Accounting for a personal energy mix","text":"<p>The <code>ciMarket</code> parameter can be used to provide a custom value to account for differences to your regional average. This can occur due to:  </p> <ul> <li>A different market share through a contract with your energy provider, guaranteeing to provide a certain percentage of electricity from renewable sources  </li> <li>Direct contributions to the used electricity (e.g. via owned solar panels)</li> </ul> <p>You can calculate an approximation of your personal/marked-based CI via the average of the emission factors weighted by their respective share in your mix.</p> <p>Example: If your institution would produce half of their energy themselves through 20% hydroelectric and 80% solar power generation:</p> \\[ \\mathrm{ci}_{\\mathrm{total}} = \\left( \\mathrm{ci}_{\\mathrm{hydro}} \\cdot 0.2 + \\mathrm{ci}_{\\mathrm{solar}} \\cdot 0.8 \\right) \\cdot 0.5 + \\mathrm{ci}_{\\mathrm{region}} \\cdot 0.5 \\] <p>Info</p> <p>We encourage the reporting of emission values by location instead of marked-based carbon intensities. The energy is still drawn from a finite pool of renewables, currently available to your grid. It would likely be utilized for another buyer, regardless of the contract. This is not to say that these contracts are without merit, but the short-term differences are limited.</p>"},{"location":"usage/configuration/#cloud-computations","title":"Cloud computations","text":"<p>While the CO\u2082 footprint calculation works on cloud instances, nf-co2footprint can currently not natively support all cloud environments, as cloud-specific values (such as certain CPU models or PUE values) may be missing in our datasets. As a result, calculations may often rely on fallback values.</p> <p>Info</p> <p>For common cloud platforms, the plugin automatically applies provider-specific default PUE values. However, not all cloud providers or platforms are currently covered, so you may need to supply some information manually. You can view the full list of supported providers and their corresponding PUEs in the executor PUE mapping file. For example, for AWS a default PUE of 1.15 is used.</p> <p>To improve the estimate of your CO\u2082 footprint on the cloud, you are encouraged to manually provide:  </p> <ul> <li>The location of your instance (e.g., zone code <code>'DE'</code> for AWS region <code>eu-central-1</code>)</li> <li>Set the <code>ciMarket</code> parameter if you know the CI of the energy mix used by the cloud instance</li> <li>The PUE of the data center (cloud providers often give global averages)</li> <li>If the plugin\u2019s TDP table does not include the CPU models used by your cloud compute instance and you know the per-core TDP for those models, you have two options:  <ul> <li>If you have multiple CPU models, provide a <code>customCpuTdpFile</code> containing their TDP values.</li> <li>If you have only one CPU model and do not want to provide a table, set <code>ignoreCpuModel = true</code> and specify <code>powerdrawCpuDefault</code>.  </li> </ul> </li> </ul> <p>For more information, see Parameters.</p> <p>Example configuration:</p> nextflow_cloud.config<pre><code>plugins {\n  id 'nf-co2footprint@1.0.0'\n}\n\ndef co2_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')\n\nco2footprint {\n    traceFile           = \"${params.outdir}/co2footprint/co2footprint_trace_${co2_timestamp}.txt\"\n    summaryFile         = \"${params.outdir}/co2footprint/co2footprint_summary_${co2_timestamp}.txt\"\n    reportFile          = \"${params.outdir}/co2footprint/co2footprint_report_${co2_timestamp}.html\"\n    location            = 'DE'\n    emApiKey            = secrets.EM_API_KEY\n    pue                 = 1.3\n    ignoreCpuModel      = true\n    powerdrawCpuDefault = 8\n}\n</code></pre>"},{"location":"usage/configuration/#gpu-computations","title":"GPU computations","text":"<p>Warning</p> <p>GPU support is not yet implemented. Tracking of GPU-driven computations may not work or may be incomplete.</p>"},{"location":"usage/output/","title":"Output","text":""},{"location":"usage/output/#files","title":"Files:","text":"<p>The nf-co2footprint plugin creates three output files:</p> <ul> <li> <p><code>traceFile</code> (sample)   The trace file includes calculations for each task, similar to the Nextflow trace file. Within this file you can find resource usage details of specific tasks and also the hardware information of your CPU.</p> </li> <li> <p><code>summaryFile</code> (sample)   The summary file includes the total CO\u2082 footprint of the workflow run and the configuration used for the plugin.</p> </li> <li> <p><code>reportFile</code> (sample)   The HTML report contains information about the carbon footprint of the whole pipeline run as well as plots showing the distributions of the CO\u2082 emissions for the different processes. The CO\u2082 emissions are separated into newly generated (i.e. from non-cached tasks) and total (including cached tasks). Additionally, it contains a table with the metrics for all individual tasks. The table is limited to 10000 entries by default. It finishes up with an overview plot of the carbon intensities during the workflow execution.</p> </li> </ul> <p>Note</p> <p>Column headers in tables displaying task-specific metrics use the same field names as Nextflow\u2019s native trace output when representing the same metric. For field definitions, see the Nextflow documentation: Trace file fields.</p>"},{"location":"usage/output/#logging","title":"Logging:","text":"<p>Log messages may indicate issues, successful steps, or warnings about potentially unwanted behavior. By default, identical messages triggered by multiple tasks are shown only once in the console, while every occurrence is recorded in the <code>.nextflow.log</code> file with a <code>[DUPLICATE]</code> tag.</p>"},{"location":"usage/parameters/","title":"Parameters","text":"<p>The following parameters are currently available:</p>"},{"location":"usage/parameters/#output-files","title":"Output Files","text":"<ul> <li> <p><code>traceFile</code>   Name of the <code>.txt</code> carbon footprint report containing the energy consumption, estimated CO\u2082 emission, and other relevant metrics for each task. Default: <code>co2footprint_trace_&lt;timestamp&gt;.txt</code></p> </li> <li> <p><code>summaryFile</code>   Name of the <code>.txt</code> carbon footprint summary file containing the total energy consumption and total estimated CO\u2082 emission of the pipeline run. Default: <code>co2footprint_summary_&lt;timestamp&gt;.txt</code></p> </li> <li> <p><code>reportFile</code>   Name of the HTML report containing information about the entire carbon footprint, overview plots, and more detailed task-specific metrics. Default: <code>co2footprint_report_&lt;timestamp&gt;.html</code></p> </li> </ul>"},{"location":"usage/parameters/#location-carbon-intensity","title":"Location &amp; Carbon Intensity","text":"<ul> <li> <p><code>location</code>   Zone code of the geographical location of the computing machine. Find your <code>zone code</code> on the Electricity Maps zones overview. If the provided code does not match one of the defined, it will be set to <code>null</code>, resulting in a fallback to the worldwide default value. Default: <code>null</code></p> </li> <li> <p><code>emApiKey</code>   Your Electricity Maps API token.   Register in the developer portal, then create a Nextflow secret with the name <code>EM_API_KEY</code> for your API key using: <code>nextflow secrets set EM_API_KEY \"paste_api_key_here\"</code>. Then, set the config parameter to <code>secrets.EM_API_KEY</code>. Default: <code>null</code></p> </li> <li> <p><code>ci</code>   Location-based carbon intensity (CI). Set this parameter only if you know the CI for your location and prefer not to use the Electricity Maps API. However, using the API is recommended to retrieve real-time data for more accurate calculations. Default:  <code>null</code></p> </li> <li> <p><code>ciMarket</code>   This parameter can be added to account for individual differences in the energy mix that is used for computation. It is strongly recommended to read the Accounting for a personal energy mix   section beforehand. This parameter does not replace the location-based CI, but adds another value to the final report. Default:  <code>null</code></p> </li> </ul>"},{"location":"usage/parameters/#data-center-machine-settings","title":"Data Center &amp; Machine Settings","text":"<ul> <li> <p><code>pue</code>   Power usage effectiveness (PUE) of the data centre. For local cluster you can usually find out your specific PUE from the system administrators or system managers. Also, the current yearly worldwide average could be used. The plugin uses provider-specific default PUE values for supported cloud platforms if the respective executor is registered by Nextflow. You can find these values in the executor PUE mapping file. If specified, this value will override any PUE determined by <code>machineType</code>. Default: 1.00</p> </li> <li> <p><code>machineType</code>   Type of machine used for computation. Determines the <code>pue</code> if not explicitly set.   Must be one of: <code>'compute cluster'</code>, <code>'local'</code>, or <code>'cloud'</code>.   If not specified, inferred from Nextflow <code>process.executor</code>:</p> <ul> <li><code>'local'</code>: sets <code>pue</code> to 1.0  </li> <li><code>'compute cluster'</code>: sets <code>pue</code> to 1.67  </li> <li><code>'cloud'</code>: sets <code>pue</code> to 1.56 <sup>Source: Uptime Institute 2024 Global Data Center Survey</sup></li> </ul> </li> </ul>"},{"location":"usage/parameters/#hardware-power-draw","title":"Hardware Power Draw","text":"<ul> <li> <p><code>powerdrawMem</code>   Power draw from memory. Default: 0.3725.</p> </li> <li> <p><code>customCpuTdpFile</code>   Input CSV file containing custom CPU TDP data. This should contain the following columns: <code>name</code>, <code>tdp (W)</code>, <code>cores</code>. Note that this overwrites TDP values for already provided CPU models. You can find the by default used TDP data here. Default: <code>null</code>.</p> <p>Example custom CPU TDP table: </p> name tdp (W) cores Intel(R) Xeon(R) CPU E5-2670 v3 120 12 AMD EPYC 7742 225 64 Intel(R) Core(TM) i7-9700K 95 8 <p>File format</p> <p>The table has to be supplied in .csv format.</p> </li> <li> <p><code>ignoreCpuModel</code>   Ignore the retrieved Nextflow trace <code>cpu_model</code> name and use the default CPU power draw value. This is useful, if the cpu model information provided by the linux kernel is not correct, for example, in the case of VMs emulating a different CPU architecture. Default: <code>false</code>.</p> </li> <li> <p><code>powerdrawCpuDefault</code>   The default value used as the power draw from a computing core.   This is only applied if the parameter <code>ignoreCpuModel</code> is set or if the retrieved <code>cpu_model</code> could not be found in the given CPU TDP data. Default: 12.0.</p> </li> <li> <p><code>cpuPowerModel</code> </p> <p>Experimental feature</p> <p>The <code>cpuPowerModel</code> parameter is experimental and may change in future releases.</p> <p>Polynomial coefficients for a custom CPU power model (highest degree first). If specified, this overrides TDP-based power draw estimation for CPU cores. The coefficients should define a function that returns the per-core power draw (in Watts) as a function of core utilization (0\u20131). Example: <code>[0.5, 10.0]</code> defines the model <code>0.5 * coreUsage + 10</code>. Default: <code>null</code>.</p> <p>Example custom CPU power model:</p> <p></p> </li> </ul>"}]}
{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"nf-co2footprint","text":"<p>A Nextflow plugin to estimate the CO<sub>2</sub> footprint of pipeline runs.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>The nf-co2footprint plugin estimates the energy consumption for each pipeline task based on the Nextflow resource usage metrics and information about the power consumption of the underlying compute system. The carbon intensity of the energy production is then used to estimate the respective CO<sub>2</sub> emission.</p> <p>The calculation is based on the carbon footprint computation method developed in the Green Algorithms project: www.green-algorithms.org</p> <p>Green Algorithms: Quantifying the Carbon Footprint of Computation.</p> <p>Lannelongue, L., Grealey, J., Inouye, M.,</p> <p>Adv. Sci. 2021, 2100707. https://doi.org/10.1002/advs.202100707</p> <p>The nf-co2footprint plugin generates a detailed TXT carbon footprint report containing the energy consumption, the estimated CO<sub>2</sub> emission and other relevant metrics for each task. Additionally, an HTML report is generated with information about the carbon footprint of the whole pipeline run and containing plots showing, for instance, an overview of the CO<sub>2</sub> emissions for the different processes.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Declare the plugin in your Nextflow pipeline configuration file:</p> nextflow.config<pre><code>plugins {\n  id 'nf-co2footprint@1.0.0-beta'\n}\n</code></pre> <p>This is all that is needed. Run your pipeline with the usual command.</p> <p>You can find more information on plugins in the Nextflow documentation.</p> <p>[!NOTE] To test the plugin prior to its first release, refer to the contributing documentation.</p>"},{"location":"#credits","title":"Credits","text":"<p>The nf-co2footprint plugin is mainly developed and maintained by Sabrina Krakau and J\u00falia Mir-Pedrol at QBiC.</p> <p>We thank the following people for their extensive assistance in the development of this pipeline:</p> <ul> <li>Phil Ewels</li> <li>Paolo Di Tommaso</li> </ul>"},{"location":"co2footprint/","title":"CO2e Footprint Measures","text":"<p>A CO<sub>2</sub> equivalent (CO<sub>2</sub>e) is a metric used to compare the emissions from various greenhouse gases based on their impact on global warming.</p> <p>For this, the amounts of other gases are converted to the amount of CO<sub>2</sub> that would have the same impact on global warming (over a 100-year period).</p> <p>The formula used for the calculation of the carbon footprint (\\(CO_2e\\)) of one Nextflow task is:</p> <p>\\(CO_2e = t \\cdot (n_c \\cdot P_c \\cdot u_c + n_m \\cdot P_m) \\cdot PUE \\cdot CI\\)</p> <p>where</p> <p>\\(t\\) = the running time of the computation (h) \\(n_c\\) = the number of cores \\(n_m\\) = the size of memory available (GB) \\(u_c\\) = the core usage factor (between 0 and 1) \\(P_c\\) = the power draw of a computing core (W) \\(P_m\\) = the power draw of memory (W, per GB) \\(PUE\\) = the efficiency coefficient of the data centre \\(CI\\) = the carbon intensity of energy production, which represents the carbon footprint of producing 1 kWh of energy for a given country and energy mix</p> <p>For the final CO<sub>2</sub>e estimation of a pipeline run, the values of all cached and completed tasks are summed up. This includes failed tasks as well.</p> <p>Warning</p> <p>Note that the usage of GPUs is not yet supported.</p>"},{"location":"co2footprint/#used-data","title":"Used data","text":"<p>If the <code>location</code> parameter is specified, the plugin makes use of location-specific CI data that was copied from the Green Algorithms project green-algorithms-tool/data. The CPU TDP data from the Green Algorithms project is used to retrieve model-specific CPU power draw values.</p>"},{"location":"co2footprint/#references","title":"References","text":"<p>Green Algorithms: Quantifying the Carbon Footprint of Computation.</p> <p>Lannelongue, L., Grealey, J., Inouye, M.,</p> <p>Adv. Sci. 2021, 2100707. https://doi.org/10.1002/advs.202100707</p>"},{"location":"contributing/setup/","title":"Getting started with plugin development","text":""},{"location":"contributing/setup/#launch-it-with-nextflow","title":"Launch it with Nextflow","text":"<p>To test with Nextflow for development purpose:</p> <ol> <li>Clone the Nextflow repo into a sibling directory</li> </ol> <pre><code>cd .. &amp;&amp; git clone https://github.com/nextflow-io/nextflow\ncd nextflow &amp;&amp; ./gradlew exportClasspath\n</code></pre> <ol> <li>Append the following line to the <code>settings.gradle</code> in this project:</li> </ol> <pre><code>includeBuild('../nextflow')\n</code></pre> <ol> <li>Compile the plugin code</li> </ol> <pre><code>./gradlew compileGroovy\n</code></pre> <ol> <li>Run nextflow with this command:</li> </ol> <pre><code>./launch.sh run -plugins nf-co2footprint &lt;script/pipeline name&gt; [pipeline params]\n</code></pre>"},{"location":"contributing/setup/#alternative-launch-without-a-local-nextflow-build","title":"Alternative: Launch without a local Nextflow build","text":"<p>The plugin can be tested without using a local Nextflow build using the following steps:</p> <p>Warning</p> <p>This will install the compiled plugin code into your <code>$NXF_PLUGINS_DIR</code> directory (default: <code>${HOME}/.nextflow/plugins</code>).  If the plugin version from the manifest file (<code>plugins/nf-co2footprint/src/resources/META-INF/MANIFEST.MF</code>) of the dev code matches an existing plugin, any install will be overwritten.</p> <ol> <li>Compile and install the plugin code</li> </ol> <pre><code>./gradlew compileGroovy\nmake install\n</code></pre> <ol> <li>Run nextflow with this command, specifying the plugin version:</li> </ol> <pre><code>nextflow run -plugins nf-co2footprint@1.0.0-beta &lt;script/pipeline name&gt; [pipeline params]\n</code></pre>"},{"location":"contributing/setup/#compiling-and-running-tests","title":"Compiling and running tests","text":"<p>To compile and run the tests use the following command:</p> <pre><code>./gradlew check\n</code></pre>"},{"location":"contributing/setup/#change-and-preview-the-docs","title":"Change and preview the docs","text":"<p>The docs are generated using Material for MkDocs. To change the docs, edit the files in the docs/ folder and run the following command to generate the docs (after installing mkdocs via <code>pip install mkdocs-material</code>):</p> <pre><code>mkdocs serve\n</code></pre> <p>To preview the docs, open the URL provided by mkdocs in your browser.</p>"},{"location":"usage/parameters/","title":"Parameters","text":""},{"location":"usage/parameters/#customising-parameters","title":"Customising parameters","text":"<p>You can adjust the nf-co2footprint plugin parameters in your config file as follows:</p> nextflow.config<pre><code>def co2_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')\n\nco2footprint {\n    traceFile   = \"${params.outdir}/co2footprint_trace_${co2_timestamp}.txt\"\n    reportFile  = \"${params.outdir}/co2footprint_report_${co2_timestamp}.html\"\n    ci          = 300\n    pue         = 1.4\n}\n</code></pre> <p>Include the config file for your pipeline run using the <code>-c</code> Nextflow parameter, for example as follows:</p> <pre><code>nextflow run nextflow-io/hello -c nextflow.config\n</code></pre> <p>The following parameters are currently available:</p> <ul> <li><code>traceFile</code>: Name of the TXT carbon footprint report containing the energy consumption, the estimated CO<sub>2</sub> emission and other relevant metrics for each task. Default: <code>co2footprint_trace_&lt;timestamp&gt;.txt</code>.</li> <li><code>summaryFile</code>: Name of the TXT carbon footprint summary file containing the total energy consumption and the total estimated CO<sub>2</sub> emission of the pipeline run. Default: <code>co2footprint_summary_&lt;timestamp&gt;.txt</code>.</li> <li><code>reportFile</code>: Name of the HTML report containing information about the entire carbon footprint, overview plots and more detailed task-specific metrics. Default: <code>co2footprint_report_&lt;timestamp&gt;.html</code>.</li> <li><code>ci</code>: carbon intensity of the respective energy production. Mutually exclusive with the <code>location</code> parameter. Default: 475.</li> <li><code>location</code>: location code to automatically retrieve a location-specific CI value. For countries, these are ISO alpha-2 codes.  For regions, it\u2019s the ISO alpha-2 code for the country, followed by an identifier for the state, e.g. US-CA for \u201cCalifornia, USA\u201d. You can find the available data here. Mutually exclusive with the <code>ci</code> parameter. Default: <code>null</code>.</li> <li><code>pue</code>: power usage effectiveness, efficiency coefficient of the data centre. Default: 1.67.</li> <li><code>powerdrawMem</code>: power draw from memory. Default: 0.3725.</li> <li><code>customCpuTdpFile</code>: Input CSV file containing custom CPU TDP data. This should contain the following columns: <code>model</code>,<code>TDP</code>,<code>n_cores</code>,<code>TDP_per_core</code>. Note that this overwrites TDP values for already provided CPU models. You can find the by default used TDP data here. Default: <code>null</code>.</li> <li><code>ignoreCpuModel</code>: ignore the retrieved Nextflow trace <code>cpu_model</code> name and use the default CPU power draw value. This is useful, if the cpu model information provided by the linux kernel is not correct, for example, in the case of VMs emulating a different CPU architecture. Default: <code>false</code>.</li> <li><code>powerdrawCpuDefault</code>: the default value used as the power draw from a computing core. This is only applied if the parameter <code>ignoreCpuModel</code> is set or if the retrieved <code>cpu_model</code> could not be found in the given CPU TDP data. Default: 12.0.</li> </ul>"}]}